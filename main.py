"""
Simula√ß√£o de Sistema de Filas - FireWhip (Beto Carrero World)
===========================================================

Este m√≥dulo implementa uma simula√ß√£o de eventos discretos para modelar
o sistema de filas da montanha-russa FireWhip do Beto Carrero World.

Autores: Andr√© Gustavo, Eduardo Silva, Marcus Fernando, Pedro Lucas,
         Samuel Victor, Lucas Gabriel
Disciplina: Simula√ß√£o e Avalia√ß√£o de Software
"""

import simpy
import random
import matplotlib.pyplot as plt
import pandas as pd
from dataclasses import dataclass
from typing import List, Dict, Tuple
import numpy as np
from statistics import mean, stdev


@dataclass
class Cliente:
    """Representa um visitante na fila da FireWhip."""
    id: int
    tempo_chegada: float
    tempo_inicio_servico: float = 0
    tempo_fim_servico: float = 0

    @property
    def tempo_espera(self) -> float:
        """Calcula o tempo de espera na fila."""
        return self.tempo_inicio_servico - self.tempo_chegada

    @property
    def tempo_sistema(self) -> float:
        """Calcula o tempo total no sistema."""
        return self.tempo_fim_servico - self.tempo_chegada


class FireWhipSimulacao:
    """
    Simula√ß√£o do sistema de filas da montanha-russa FireWhip.

    Caracter√≠sticas da FireWhip:
    - Capacidade: 20 pessoas por ciclo
    - Dura√ß√£o do passeio: 1min 36seg (96 segundos)
    - Tempo de embarque/desembarque: 3 minutos (180 segundos)
    - Ciclo total: 5 minutos (300 segundos)
    """

    # Constantes da FireWhip
    CAPACIDADE_FIREWHIP = 20
    TEMPO_PASSEIO = 96  # segundos (1min 36seg)
    TEMPO_EMBARQUE = 180  # segundos (3 minutos)
    CICLO_TOTAL = TEMPO_PASSEIO + TEMPO_EMBARQUE  # 276 segundos ‚âà 5 minutos

    def __init__(self, env: simpy.Environment, cenario: str = "baixa_temporada"):
        """
        Inicializa a simula√ß√£o.

        Args:
            env: Ambiente SimPy
            cenario: "baixa_temporada" ou "alta_temporada"
        """
        self.env = env
        self.cenario = cenario
        self.firewhip = simpy.Resource(env, capacity=1)  # Uma montanha-russa
        self.clientes_atendidos: List[Cliente] = []
        self.clientes_sistema: List[Cliente] = []
        self.contador_clientes = 0
        self.historico_fila: List[Tuple[float, int]] = []

        # Configura√ß√µes por cen√°rio
        self.config_cenario = self._configurar_cenario(cenario)

    def _configurar_cenario(self, cenario: str) -> Dict:
        """Configura par√¢metros espec√≠ficos do cen√°rio."""
        configuracoes = {
            "baixa_temporada": {
                "intervalo_chegada": 120,  # 2 minutos entre chegadas
                "desvio_chegada": 30,  # Varia√ß√£o de ¬±30 segundos
                "descricao": "Baixa Temporada (Mar-Jun): 1 visitante a cada 2 minutos"
            },
            "alta_temporada": {
                "intervalo_chegada": 30,  # 30 segundos entre chegadas
                "desvio_chegada": 10,  # Varia√ß√£o de ¬±10 segundos
                "descricao": "Alta Temporada (Jan,Jul,Dez): 1 visitante a cada 30 segundos"
            }
        }
        return configuracoes[cenario]

    def gerar_chegadas(self):
        """Processo gerador de chegadas de clientes."""
        while True:
            # Tempo at√© pr√≥xima chegada (distribui√ß√£o normal)
            intervalo = max(1, random.normalvariate(
                self.config_cenario["intervalo_chegada"],
                self.config_cenario["desvio_chegada"]
            ))

            yield self.env.timeout(intervalo)

            # Criar novo cliente
            self.contador_clientes += 1
            cliente = Cliente(
                id=self.contador_clientes,
                tempo_chegada=self.env.now
            )

            # Registrar tamanho atual da fila
            tamanho_fila = len(self.firewhip.queue) + len(self.firewhip.users)
            self.historico_fila.append((self.env.now, tamanho_fila))

            # Iniciar processo de atendimento
            self.env.process(self.processo_firewhip(cliente))

    def processo_firewhip(self, cliente: Cliente):
        """
        Processo de atendimento na FireWhip.

        Args:
            cliente: Cliente a ser atendido
        """
        # Aguardar vez na fila (at√© 20 pessoas)
        with self.firewhip.request() as request:
            yield request

            # Cliente inicia atendimento
            cliente.tempo_inicio_servico = self.env.now
            self.clientes_sistema.append(cliente)

            print(f"[{self.env.now:6.1f}s] Cliente {cliente.id:3d} iniciou atendimento "
                  f"(esperou {cliente.tempo_espera:5.1f}s)")

            # Aguardar at√© completar grupo de 20 pessoas ou timeout
            yield self.env.timeout(self.TEMPO_EMBARQUE)  # Embarque
            yield self.env.timeout(self.TEMPO_PASSEIO)  # Passeio

            # Cliente finaliza atendimento
            cliente.tempo_fim_servico = self.env.now
            self.clientes_atendidos.append(cliente)

            print(f"[{self.env.now:6.1f}s] Cliente {cliente.id:3d} finalizou atendimento "
                  f"(tempo total: {cliente.tempo_sistema:5.1f}s)")

    def coletar_estatisticas(self) -> Dict:
        """Coleta e calcula estat√≠sticas da simula√ß√£o."""
        if not self.clientes_atendidos:
            return {"erro": "Nenhum cliente foi atendido"}

        # Tempos de espera
        tempos_espera = [c.tempo_espera for c in self.clientes_atendidos]
        tempos_sistema = [c.tempo_sistema for c in self.clientes_atendidos]

        # An√°lise da fila
        if self.historico_fila:
            tamanhos_fila = [tamanho for _, tamanho in self.historico_fila]
            fila_max = max(tamanhos_fila)
            fila_media = mean(tamanhos_fila)
        else:
            fila_max = fila_media = 0

        # Taxa de atendimento
        tempo_total_simulacao = self.env.now
        taxa_atendimento = len(self.clientes_atendidos) / (tempo_total_simulacao / 3600)  # clientes/hora

        # Utiliza√ß√£o do sistema
        tempo_ocupado = len(self.clientes_atendidos) * self.CICLO_TOTAL
        utilizacao = (tempo_ocupado / tempo_total_simulacao) * 100

        estatisticas = {
            "cenario": self.cenario,
            "descricao": self.config_cenario["descricao"],
            "tempo_simulacao_horas": tempo_total_simulacao / 3600,
            "clientes_chegaram": self.contador_clientes,
            "clientes_atendidos": len(self.clientes_atendidos),
            "clientes_na_fila": len(self.clientes_sistema) - len(self.clientes_atendidos),

            # Tempos de espera
            "tempo_espera_medio": mean(tempos_espera),
            "tempo_espera_min": min(tempos_espera),
            "tempo_espera_max": max(tempos_espera),
            "tempo_espera_desvio": stdev(tempos_espera) if len(tempos_espera) > 1 else 0,

            # Tempos no sistema
            "tempo_sistema_medio": mean(tempos_sistema),
            "tempo_sistema_max": max(tempos_sistema),

            # An√°lise da fila
            "fila_tamanho_max": fila_max,
            "fila_tamanho_medio": fila_media,

            # Performance
            "taxa_atendimento_hora": taxa_atendimento,
            "utilizacao_sistema_percent": utilizacao,

            # Dados brutos
            "tempos_espera": tempos_espera,
            "historico_fila": self.historico_fila
        }

        return estatisticas


def executar_simulacao(cenario: str, tempo_simulacao_horas: float = 8) -> Dict:
    """
    Executa uma simula√ß√£o completa para um cen√°rio espec√≠fico.

    Args:
        cenario: "baixa_temporada" ou "alta_temporada"
        tempo_simulacao_horas: Dura√ß√£o da simula√ß√£o em horas

    Returns:
        Dicion√°rio com estat√≠sticas da simula√ß√£o
    """
    print(f"\n{'=' * 60}")
    print(f"INICIANDO SIMULA√á√ÉO - {cenario.upper()}")
    print(f"{'=' * 60}")

    # Configurar ambiente SimPy
    random.seed(42)  # Para reprodutibilidade
    env = simpy.Environment()

    # Criar simula√ß√£o
    simulacao = FireWhipSimulacao(env, cenario)

    # Iniciar processo de chegadas
    env.process(simulacao.gerar_chegadas())

    # Executar simula√ß√£o
    tempo_simulacao_segundos = tempo_simulacao_horas * 3600
    env.run(until=tempo_simulacao_segundos)

    # Coletar resultados
    estatisticas = simulacao.coletar_estatisticas()

    print(f"\nSIMULA√á√ÉO CONCLU√çDA - {cenario.upper()}")
    print(f"{'=' * 60}")

    return estatisticas


def imprimir_relatorio(stats: Dict):
    """Imprime relat√≥rio formatado das estat√≠sticas."""
    print(f"\nüìä RELAT√ìRIO DE SIMULA√á√ÉO")
    print(f"{'=' * 50}")
    print(f"Cen√°rio: {stats['descricao']}")
    print(f"Tempo de simula√ß√£o: {stats['tempo_simulacao_horas']:.1f} horas")
    print(f"\nüë• CLIENTES:")
    print(f"  ‚Ä¢ Chegaram: {stats['clientes_chegaram']}")
    print(f"  ‚Ä¢ Atendidos: {stats['clientes_atendidos']}")
    print(f"  ‚Ä¢ Ainda na fila: {stats['clientes_na_fila']}")
    print(f"\n‚è±Ô∏è  TEMPOS DE ESPERA:")
    print(f"  ‚Ä¢ M√©dia: {stats['tempo_espera_medio']:.1f}s ({stats['tempo_espera_medio'] / 60:.1f} min)")
    print(f"  ‚Ä¢ M√≠nimo: {stats['tempo_espera_min']:.1f}s")
    print(f"  ‚Ä¢ M√°ximo: {stats['tempo_espera_max']:.1f}s ({stats['tempo_espera_max'] / 60:.1f} min)")
    print(f"  ‚Ä¢ Desvio padr√£o: {stats['tempo_espera_desvio']:.1f}s")
    print(f"\nüèÅ TEMPO NO SISTEMA:")
    print(f"  ‚Ä¢ M√©dia: {stats['tempo_sistema_medio']:.1f}s ({stats['tempo_sistema_medio'] / 60:.1f} min)")
    print(f"  ‚Ä¢ M√°ximo: {stats['tempo_sistema_max']:.1f}s ({stats['tempo_sistema_max'] / 60:.1f} min)")
    print(f"\nüìã AN√ÅLISE DA FILA:")
    print(f"  ‚Ä¢ Tamanho m√°ximo: {stats['fila_tamanho_max']} pessoas")
    print(f"  ‚Ä¢ Tamanho m√©dio: {stats['fila_tamanho_medio']:.1f} pessoas")
    print(f"\nüìà PERFORMANCE:")
    print(f"  ‚Ä¢ Taxa atendimento: {stats['taxa_atendimento_hora']:.1f} clientes/hora")
    print(f"  ‚Ä¢ Utiliza√ß√£o sistema: {stats['utilizacao_sistema_percent']:.1f}%")


def gerar_graficos(stats_baixa: Dict, stats_alta: Dict):
    """Gera gr√°ficos comparativos dos resultados."""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))

    # Gr√°fico 1: Compara√ß√£o de tempos m√©dios de espera
    cenarios = ['Baixa Temporada', 'Alta Temporada']
    tempos_espera = [stats_baixa['tempo_espera_medio'] / 60, stats_alta['tempo_espera_medio'] / 60]

    ax1.bar(cenarios, tempos_espera, color=['green', 'red'], alpha=0.7)
    ax1.set_title('Tempo M√©dio de Espera por Cen√°rio')
    ax1.set_ylabel('Tempo (minutos)')
    ax1.grid(True, alpha=0.3)

    # Gr√°fico 2: Distribui√ß√£o dos tempos de espera
    ax2.hist(np.array(stats_baixa['tempos_espera']) / 60, bins=20, alpha=0.7,
             label='Baixa Temporada', color='green')
    ax2.hist(np.array(stats_alta['tempos_espera']) / 60, bins=20, alpha=0.7,
             label='Alta Temporada', color='red')
    ax2.set_title('Distribui√ß√£o dos Tempos de Espera')
    ax2.set_xlabel('Tempo de Espera (minutos)')
    ax2.set_ylabel('Frequ√™ncia')
    ax2.legend()
    ax2.grid(True, alpha=0.3)

    # Gr√°fico 3: Evolu√ß√£o do tamanho da fila (Baixa Temporada)
    if stats_baixa['historico_fila']:
        tempos_b, tamanhos_b = zip(*stats_baixa['historico_fila'][:100])  # Primeiras 100 observa√ß√µes
        ax3.plot(np.array(tempos_b) / 3600, tamanhos_b, 'g-', alpha=0.7)
        ax3.set_title('Evolu√ß√£o da Fila - Baixa Temporada')
        ax3.set_xlabel('Tempo (horas)')
        ax3.set_ylabel('Pessoas na Fila')
        ax3.grid(True, alpha=0.3)

    # Gr√°fico 4: Evolu√ß√£o do tamanho da fila (Alta Temporada)
    if stats_alta['historico_fila']:
        tempos_a, tamanhos_a = zip(*stats_alta['historico_fila'][:100])  # Primeiras 100 observa√ß√µes
        ax4.plot(np.array(tempos_a) / 3600, tamanhos_a, 'r-', alpha=0.7)
        ax4.set_title('Evolu√ß√£o da Fila - Alta Temporada')
        ax4.set_xlabel('Tempo (horas)')
        ax4.set_ylabel('Pessoas na Fila')
        ax4.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig('resultados_simulacao_firewhip.png', dpi=300, bbox_inches='tight')
    plt.show()


def main():
    """Fun√ß√£o principal - executa simula√ß√£o completa."""
    print("üé¢ SIMULA√á√ÉO DO SISTEMA DE FILAS - FIREWHIP")
    print("Beto Carrero World - An√°lise Comparativa de Cen√°rios")
    print("=" * 60)

    # Executar simula√ß√µes
    resultado_baixa = executar_simulacao("baixa_temporada", tempo_simulacao_horas=8)
    resultado_alta = executar_simulacao("alta_temporada", tempo_simulacao_horas=8)

    # Gerar relat√≥rios
    print("\n" + "=" * 60)
    print("üìã RELAT√ìRIOS DETALHADOS")
    print("=" * 60)

    imprimir_relatorio(resultado_baixa)
    print("\n" + "-" * 50)
    imprimir_relatorio(resultado_alta)

    # Compara√ß√£o final
    print(f"\nüéØ COMPARA√á√ÉO FINAL:")
    print(f"{'=' * 50}")
    melhoria_espera = (resultado_alta['tempo_espera_medio'] - resultado_baixa['tempo_espera_medio']) / 60
    print(f"Diferen√ßa no tempo de espera: +{melhoria_espera:.1f} minutos na alta temporada")

    diferenca_atendimento = resultado_alta['taxa_atendimento_hora'] - resultado_baixa['taxa_atendimento_hora']
    print(f"Diferen√ßa na taxa de atendimento: {diferenca_atendimento:+.1f} clientes/hora")

    # Gerar gr√°ficos
    print(f"\nüìä Gerando gr√°ficos comparativos...")
    gerar_graficos(resultado_baixa, resultado_alta)

    print(f"\n‚úÖ Simula√ß√£o conclu√≠da! Gr√°ficos salvos em 'resultados_simulacao_firewhip.png'")


if __name__ == "__main__":
    main()